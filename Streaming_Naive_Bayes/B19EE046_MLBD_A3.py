# -*- coding: utf-8 -*-
"""B19EE046_MLBD_A3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lS-j-NFye8TweUCx1Ey9GiU_lyBCRFIr
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install memory-profiler
!pip install --upgrade psutil
!pip install datasketch

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import gzip
import struct
import time
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
import scipy
import warnings
from sklearn.exceptions import UndefinedMetricWarning
warnings.filterwarnings('ignore', category=UndefinedMetricWarning)

def binarizer(images):
    binary_images = np.where(images > 0, 1, 0).astype('uint8')
    return binary_images

def preprocessing(images, labels=None, n_com=50, type_decomposition='PCA'):
  if type_decomposition=='PCA':
    decomposition = PCA(n_components=n_com)
    decomposition.fit(images)
  else:
    if type_decomposition=='TSNE':
      decomposition = TSNE(n_components=n_com,n_jobs=-1)
      return decomposition
    elif type_decomposition=='LDA':
      decomposition = LDA(n_components=n_com)
    else:
      print("Not a Valid Choice")
      return 0,0
    decomposition.fit(images, labels)
  return decomposition

class StreamingNaiveBayes:
  def __init__(self, batch_size=100, epsilon=1e-9, alpha=1.0):
    self.batch_size = batch_size
    self.epsilon = epsilon
    self.alpha = alpha
        
  def fit(self, X, y):
    self.classes = np.unique(y)
    self.n_classes = len(self.classes)
    self.n_features = X.shape[1]     
    self.class_counts = np.zeros(self.n_classes, dtype=np.int32)
    self.feature_counts = np.zeros((self.n_classes, self.n_features), dtype=np.float64)
    for i in range(0, X.shape[0], self.batch_size):
      X_batch = X[i:i+self.batch_size]
      y_batch = y[i:i+self.batch_size]      
      self.class_counts += np.bincount(y_batch, minlength=self.n_classes)
      for j in range(self.n_classes):
        mask = (y_batch == self.classes[j])
        count = np.sum(mask)
        self.feature_counts[j] += np.sum(X_batch[mask], axis=0)
    self.feature_probs = (self.feature_counts + self.alpha) / (self.class_counts.reshape(-1, 1) + self.alpha * self.n_features + self.epsilon)
    self.class_probs = self.class_counts / np.sum(self.class_counts)
        
  def predict(self, X):
    log_likelihoods=0
    if np.any((self.feature_probs + self.epsilon).T<=0):
      log_likelihoods = np.dot(X, np.log(np.abs(self.feature_probs + self.epsilon).T)) + np.log(self.class_probs + self.epsilon)
    elif np.any((self.class_probs + self.epsilon)<=0):
      log_likelihoods = np.dot(X, np.log((self.feature_probs + self.epsilon).T)) + np.log(np.abs(self.class_probs + self.epsilon))
    elif np.any((self.class_probs + self.epsilon)<=0) and np.any((self.feature_probs + self.epsilon).T<=0):
      log_likelihoods = np.dot(X, np.log(np.abs(self.feature_probs + self.epsilon).T)) + np.log(np.abs(self.class_probs + self.epsilon))
    else:
      log_likelihoods = np.dot(X, np.log((self.feature_probs + self.epsilon).T)) + np.log(self.class_probs + self.epsilon)
    return self.classes[np.argmax(log_likelihoods, axis=1)]

with gzip.open('/content/drive/MyDrive/MLBD_Assignment_2/train-images-idx3-ubyte.gz', 'rb') as f:
    _, num_images, num_rows, num_cols = struct.unpack('>IIII', f.read(16))
    images_binary = f.read(num_images*num_rows*num_cols)
    tr_images = np.frombuffer(images_binary, dtype=np.uint8)
    tr_images = tr_images.reshape(num_images, num_rows, num_cols)

with gzip.open('/content/drive/MyDrive/MLBD_Assignment_2/train-labels-idx1-ubyte.gz', 'rb') as f:
    _, num_labels = struct.unpack('>II', f.read(8))
    labels_binary = f.read(num_labels)
    tr_labels = np.frombuffer(labels_binary, dtype=np.uint8)

with gzip.open('/content/drive/MyDrive/MLBD_Assignment_2/t10k-images-idx3-ubyte.gz', 'rb') as f:
    _, num_images, num_rows, num_cols = struct.unpack('>IIII', f.read(16))
    images_binary = f.read(num_images*num_rows*num_cols)
    te_images = np.frombuffer(images_binary, dtype=np.uint8)
    te_images = te_images.reshape(num_images, num_rows, num_cols)

with gzip.open('/content/drive/MyDrive/MLBD_Assignment_2/t10k-labels-idx1-ubyte.gz', 'rb') as f:
    _, num_labels = struct.unpack('>II', f.read(8))
    labels_binary = f.read(num_labels)
    te_labels = np.frombuffer(labels_binary, dtype=np.uint8)

tr_images = tr_images.reshape(tr_images.shape[0],-1)
te_images = te_images.reshape(te_images.shape[0],-1)
print(tr_images.shape,te_images.shape)

tr_images, te_images = binarizer(tr_images), binarizer(te_images)

"""#Without applying Dimensionality Reduction

## Stream_Window=10, Epsilon=1e-9, Alpha=1.0
"""

nb = StreamingNaiveBayes(batch_size=10, epsilon=1e-9, alpha=1.0)
start_tr = time.time()
nb.fit(tr_images, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_images)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""## Stream_Window=100, Epsilon=1e-9, Alpha=1.0"""

nb = StreamingNaiveBayes(batch_size=100, epsilon=1e-9, alpha=1.0)
start_tr = time.time()
nb.fit(tr_images, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_images)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""## Stream_Window=10, Epsilon=1, Alpha=1.0"""

nb = StreamingNaiveBayes(batch_size=10, epsilon=1, alpha=1.0)
start_tr = time.time()
nb.fit(tr_images, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_images)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""## Stream_Window=100, Epsilon=1, Alpha=1.0"""

nb = StreamingNaiveBayes(batch_size=100, epsilon=1, alpha=1.0)
start_tr = time.time()
nb.fit(tr_images, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_images)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""## Stream_Window=10, Epsilon=1e9, Alpha=1.0"""

nb = StreamingNaiveBayes(batch_size=10, epsilon=1e9, alpha=1.0)
start_tr = time.time()
nb.fit(tr_images, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_images)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""## Stream_Window=100, Epsilon=1e9, Alpha=1.0"""

nb = StreamingNaiveBayes(batch_size=100, epsilon=1e9, alpha=1.0)
start_tr = time.time()
nb.fit(tr_images, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_images)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""## Stream_Window=10, Epsilon=1e-9, Alpha=10.0"""

nb = StreamingNaiveBayes(batch_size=10, epsilon=1e-9, alpha=10.0)
start_tr = time.time()
nb.fit(tr_images, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_images)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""## Stream_Window=10, Epsilon=1e-9, Alpha=0.1"""

nb = StreamingNaiveBayes(batch_size=10, epsilon=1e-9, alpha=0.1)
start_tr = time.time()
nb.fit(tr_images, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_images)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""## Stream_Window=10, Epsilon=1e-9, Alpha=100.0"""

nb = StreamingNaiveBayes(batch_size=10, epsilon=1e-9, alpha=100.0)
start_tr = time.time()
nb.fit(tr_images, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_images)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""## Stream_Window=10, Epsilon=1e-9, Alpha=0.01"""

nb = StreamingNaiveBayes(batch_size=10, epsilon=1e-9, alpha=0.01)
start_tr = time.time()
nb.fit(tr_images, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_images)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""#While using Dimensionality Reduction

##PCA

###n_components=50
"""

mode = preprocessing(tr_images, tr_labels, 50, 'PCA')
tr_image, te_image = mode.transform(tr_images), mode.transform(te_images)
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

mode = preprocessing(tr_images, tr_labels, 50, 'PCA')
images = mode.fit_transform(np.vstack((tr_images, te_images)))
tr_image, te_image = images[:60001,:], images[60000:,:]
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""###n_components=100"""

mode = preprocessing(tr_images, tr_labels, 100, 'PCA')
tr_image, te_image = mode.transform(tr_images), mode.transform(te_images)
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

mode = preprocessing(tr_images, tr_labels, 100, 'PCA')
images = mode.fit_transform(np.vstack((tr_images, te_images)))
tr_image, te_image = images[:60001,:], images[60000:,:]
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""###n_components=200"""

mode = preprocessing(tr_images, tr_labels, 200, 'PCA')
tr_image, te_image = mode.transform(tr_images), mode.transform(te_images)
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

mode = preprocessing(tr_images, tr_labels, 200, 'PCA')
images = mode.fit_transform(np.vstack((tr_images, te_images)))
tr_image, te_image = images[:60001,:], images[60000:,:]
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""##LDA

###n_components=2
"""

mode = preprocessing(tr_images, tr_labels, 2, 'LDA')
tr_image, te_image = mode.transform(tr_images), mode.transform(te_images)
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

mode = preprocessing(tr_images, tr_labels, 2, 'LDA')
img = np.vstack((tr_images, te_images))
lab = np.vstack((np.expand_dims(tr_labels,1), np.expand_dims(te_labels,1)))
images = mode.fit_transform(img, lab)
tr_image, te_image = images[:60001,:], images[60000:,:]
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""###n_components=5"""

mode = preprocessing(tr_images, tr_labels, 5, 'LDA')
tr_image, te_image = mode.transform(tr_images), mode.transform(te_images)
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

mode = preprocessing(tr_images, tr_labels, 5, 'LDA')
img = np.vstack((tr_images, te_images))
lab = np.vstack((np.expand_dims(tr_labels,1), np.expand_dims(te_labels,1)))
images = mode.fit_transform(img, lab)
tr_image, te_image = images[:60001,:], images[60000:,:]
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""###n_components=8"""

mode = preprocessing(tr_images, tr_labels, 8, 'LDA')
tr_image, te_image = mode.transform(tr_images), mode.transform(te_images)
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

mode = preprocessing(tr_images, tr_labels, 8, 'LDA')
img = np.vstack((tr_images, te_images))
lab = np.vstack((np.expand_dims(tr_labels,1), np.expand_dims(te_labels,1)))
images = mode.fit_transform(img, lab)
tr_image, te_image = images[:60001,:], images[60000:,:]
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""##TSNE

###n_components=1
"""

mode = preprocessing(tr_images, tr_labels, 1, 'TSNE')
tr_image, te_image = mode.fit_transform(tr_images), mode.fit_transform(te_images)
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

mode = preprocessing(tr_images, tr_labels, 1, 'TSNE')
images = mode.fit_transform(np.vstack((tr_images, te_images)))
tr_image, te_image = images[:60001,:], images[60000:,:]
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""###n_components=2"""

mode = preprocessing(tr_images, tr_labels, 2, 'TSNE')
tr_image, te_image = mode.fit_transform(tr_images), mode.fit_transform(te_images)
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

mode = preprocessing(tr_images, tr_labels, 2, 'TSNE')
images = mode.fit_transform(np.vstack((tr_images, te_images)))
tr_image, te_image = images[:60001,:], images[60000:,:]
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

"""###n_components=3"""

mode = preprocessing(tr_images, tr_labels, 3, 'TSNE')
tr_image, te_image = mode.fit_transform(tr_images), mode.fit_transform(te_images)
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")

mode = preprocessing(tr_images, tr_labels, 3, 'TSNE')
images = mode.fit_transform(np.vstack((tr_images, te_images)))
tr_image, te_image = images[:60001,:], images[60000:,:]
nb = StreamingNaiveBayes()
start_tr = time.time()
nb.fit(tr_image, tr_labels)
end_tr = time.time()
fit_tr = end_tr - start_tr
print("Time taken to fit Stream Naive Bayes model:", fit_tr, "seconds")
start_te = time.time()
y_pred = nb.predict(te_image)
accuracy = np.sum(y_pred == te_labels) / len(te_labels)
print(f"Accuracy: {accuracy*100}%")
end_te = time.time()
fit_te = end_te - start_te
print("Time taken to evaluate Stream Naive Bayes model on test portion:", fit_te, "seconds\n")